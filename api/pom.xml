<!--

    Copyright 2005-2014 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.opensource.org/licenses/ecl2.php

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<!--
  Kuali Rice ArcheType Help

  This is the main maven build file for the project as known as a project object model.
  See the comments below to understand the major pieces of this pom. Where not commented,
  see the maven documentation for more information.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <name>The ducktyping-example API</name>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.github.kualigan</groupId>
    <artifactId>ducktyping-example</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <artifactId>ducktyping-example-api</artifactId>
  <packaging>jar</packaging>


  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>

    <!--
      To help manage complex builds, the maven enforcer plugin has many useful rules.
      This is not configured in this sample pom for simplicity sake.

      http://maven.apache.org/plugins/maven-enforcer-plugin/
    -->
    <plugins>

      <!--
        Compiler plugin to specify Java source and target versions and encoding
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>

      <!--
        This executes unit tests. These tests are executed by default when the project is built.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>
      
    </plugins>
  </build>

  <dependencies>

    <!--
      Kuali Rice libraries

      Ideally you only declare the modules of rice you are using.
      In practice, you may need to declare them all until rice's modularity work is complete.

      The only modules rice recommends compiling against are api & framework modules.

      It is usually a good idea to list ALL of the third party libraries being directly references in code.
      This makes it explicit which libraries are being used rather than coming in through a transitive relationship
      with other libraries. The http://maven.apache.org/plugins/maven-dependency-plugin/ does a pretty good job of
      finding these missing dependencies.
    -->
    <!-- core -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-core-api</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-core-framework</artifactId>
      <scope>compile</scope>
    </dependency>
    <!-- core service -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-core-service-api</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-core-service-framework</artifactId>
      <scope>compile</scope>
    </dependency>
    <!-- edl -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-edl-framework</artifactId>
      <scope>compile</scope>
    </dependency>
    <!-- ken -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-ken-api</artifactId>
      <scope>compile</scope>
    </dependency>
    <!-- kew -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-kew-api</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-kew-framework</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-kew-impl</artifactId>
      <scope>runtime</scope>
    </dependency>
    <!-- kim (not including kim-ldap support) -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-kim-api</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-kim-framework</artifactId>
      <scope>compile</scope>
    </dependency>
    <!-- kns (not including legacy kns) -->
    <!-- krad -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-krad-app-framework</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-krad-web-framework</artifactId>
      <scope>compile</scope>
    </dependency>
    <!-- krms -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-krms-api</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-krms-framework</artifactId>
      <scope>compile</scope>
    </dependency>
    <!-- ksb -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-ksb-api</artifactId>
      <scope>compile</scope>
    </dependency>
    <!-- location -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-location-api</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-location-framework</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.github.kualigan</groupId>
      <artifactId>ducktyping-example-model</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

  </dependencies>
</project>
